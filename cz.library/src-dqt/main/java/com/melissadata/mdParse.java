/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.melissadata;

public class mdParse {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected mdParse(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(mdParse obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        mdAddrJavaWrapperJNI.delete_mdParse(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public mdParse() {
    this(mdAddrJavaWrapperJNI.new_mdParse(), true);
  }

  public mdParse.ProgramStatus Initialize(String arg0) {
    return mdParse.ProgramStatus.swigToEnum(mdAddrJavaWrapperJNI.mdParse_Initialize(swigCPtr, this, arg0));
  }

  public String GetBuildNumber() {
    return mdAddrJavaWrapperJNI.mdParse_GetBuildNumber(swigCPtr, this);
  }

  public void Parse(String arg0) {
    mdAddrJavaWrapperJNI.mdParse_Parse(swigCPtr, this, arg0);
  }

  public void ParseCanadian(String arg0) {
    mdAddrJavaWrapperJNI.mdParse_ParseCanadian(swigCPtr, this, arg0);
  }

  public boolean ParseNext() {
    return mdAddrJavaWrapperJNI.mdParse_ParseNext(swigCPtr, this);
  }

  public void LastLineParse(String arg0) {
    mdAddrJavaWrapperJNI.mdParse_LastLineParse(swigCPtr, this, arg0);
  }

  public String GetZip() {
    return mdAddrJavaWrapperJNI.mdParse_GetZip(swigCPtr, this);
  }

  public String GetPlus4() {
    return mdAddrJavaWrapperJNI.mdParse_GetPlus4(swigCPtr, this);
  }

  public String GetCity() {
    return mdAddrJavaWrapperJNI.mdParse_GetCity(swigCPtr, this);
  }

  public String GetState() {
    return mdAddrJavaWrapperJNI.mdParse_GetState(swigCPtr, this);
  }

  public String GetStreetName() {
    return mdAddrJavaWrapperJNI.mdParse_GetStreetName(swigCPtr, this);
  }

  public String GetRange() {
    return mdAddrJavaWrapperJNI.mdParse_GetRange(swigCPtr, this);
  }

  public String GetPreDirection() {
    return mdAddrJavaWrapperJNI.mdParse_GetPreDirection(swigCPtr, this);
  }

  public String GetPostDirection() {
    return mdAddrJavaWrapperJNI.mdParse_GetPostDirection(swigCPtr, this);
  }

  public String GetSuffix() {
    return mdAddrJavaWrapperJNI.mdParse_GetSuffix(swigCPtr, this);
  }

  public String GetSuiteName() {
    return mdAddrJavaWrapperJNI.mdParse_GetSuiteName(swigCPtr, this);
  }

  public String GetSuiteNumber() {
    return mdAddrJavaWrapperJNI.mdParse_GetSuiteNumber(swigCPtr, this);
  }

  public String GetPrivateMailboxNumber() {
    return mdAddrJavaWrapperJNI.mdParse_GetPrivateMailboxNumber(swigCPtr, this);
  }

  public String GetPrivateMailboxName() {
    return mdAddrJavaWrapperJNI.mdParse_GetPrivateMailboxName(swigCPtr, this);
  }

  public String GetGarbage() {
    return mdAddrJavaWrapperJNI.mdParse_GetGarbage(swigCPtr, this);
  }

  public String GetRouteService() {
    return mdAddrJavaWrapperJNI.mdParse_GetRouteService(swigCPtr, this);
  }

  public String GetLockBox() {
    return mdAddrJavaWrapperJNI.mdParse_GetLockBox(swigCPtr, this);
  }

  public String GetDeliveryInstallation() {
    return mdAddrJavaWrapperJNI.mdParse_GetDeliveryInstallation(swigCPtr, this);
  }

  public int ParseRule() {
    return mdAddrJavaWrapperJNI.mdParse_ParseRule(swigCPtr, this);
  }

  public final static class ProgramStatus {
    public final static mdParse.ProgramStatus ErrorNone = new mdParse.ProgramStatus("ErrorNone", mdAddrJavaWrapperJNI.mdParse_ErrorNone_get());
    public final static mdParse.ProgramStatus ErrorOther = new mdParse.ProgramStatus("ErrorOther");
    public final static mdParse.ProgramStatus ErrorOutOfMemory = new mdParse.ProgramStatus("ErrorOutOfMemory");
    public final static mdParse.ProgramStatus ErrorRequiredFileNotFound = new mdParse.ProgramStatus("ErrorRequiredFileNotFound");
    public final static mdParse.ProgramStatus ErrorFoundOldFile = new mdParse.ProgramStatus("ErrorFoundOldFile");
    public final static mdParse.ProgramStatus ErrorDatabaseExpired = new mdParse.ProgramStatus("ErrorDatabaseExpired");
    public final static mdParse.ProgramStatus ErrorLicenseExpired = new mdParse.ProgramStatus("ErrorLicenseExpired");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ProgramStatus swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ProgramStatus.class + " with value " + swigValue);
    }

    private ProgramStatus(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ProgramStatus(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ProgramStatus(String swigName, ProgramStatus swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ProgramStatus[] swigValues = { ErrorNone, ErrorOther, ErrorOutOfMemory, ErrorRequiredFileNotFound, ErrorFoundOldFile, ErrorDatabaseExpired, ErrorLicenseExpired };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class AccessType {
    public final static mdParse.AccessType Local = new mdParse.AccessType("Local", mdAddrJavaWrapperJNI.mdParse_Local_get());
    public final static mdParse.AccessType Remote = new mdParse.AccessType("Remote");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static AccessType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + AccessType.class + " with value " + swigValue);
    }

    private AccessType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private AccessType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private AccessType(String swigName, AccessType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static AccessType[] swigValues = { Local, Remote };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class DiacriticsMode {
    public final static mdParse.DiacriticsMode Auto = new mdParse.DiacriticsMode("Auto", mdAddrJavaWrapperJNI.mdParse_Auto_get());
    public final static mdParse.DiacriticsMode On = new mdParse.DiacriticsMode("On");
    public final static mdParse.DiacriticsMode Off = new mdParse.DiacriticsMode("Off");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static DiacriticsMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + DiacriticsMode.class + " with value " + swigValue);
    }

    private DiacriticsMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private DiacriticsMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private DiacriticsMode(String swigName, DiacriticsMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static DiacriticsMode[] swigValues = { Auto, On, Off };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class StandardizeMode {
    public final static mdParse.StandardizeMode ShortFormat = new mdParse.StandardizeMode("ShortFormat", mdAddrJavaWrapperJNI.mdParse_ShortFormat_get());
    public final static mdParse.StandardizeMode LongFormat = new mdParse.StandardizeMode("LongFormat");
    public final static mdParse.StandardizeMode AutoFormat = new mdParse.StandardizeMode("AutoFormat");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static StandardizeMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + StandardizeMode.class + " with value " + swigValue);
    }

    private StandardizeMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private StandardizeMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private StandardizeMode(String swigName, StandardizeMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static StandardizeMode[] swigValues = { ShortFormat, LongFormat, AutoFormat };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class SuiteParseMode {
    public final static mdParse.SuiteParseMode ParseSuite = new mdParse.SuiteParseMode("ParseSuite", mdAddrJavaWrapperJNI.mdParse_ParseSuite_get());
    public final static mdParse.SuiteParseMode CombineSuite = new mdParse.SuiteParseMode("CombineSuite");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static SuiteParseMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + SuiteParseMode.class + " with value " + swigValue);
    }

    private SuiteParseMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private SuiteParseMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private SuiteParseMode(String swigName, SuiteParseMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static SuiteParseMode[] swigValues = { ParseSuite, CombineSuite };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class AliasPreserveMode {
    public final static mdParse.AliasPreserveMode ConvertAlias = new mdParse.AliasPreserveMode("ConvertAlias", mdAddrJavaWrapperJNI.mdParse_ConvertAlias_get());
    public final static mdParse.AliasPreserveMode PreserveAlias = new mdParse.AliasPreserveMode("PreserveAlias");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static AliasPreserveMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + AliasPreserveMode.class + " with value " + swigValue);
    }

    private AliasPreserveMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private AliasPreserveMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private AliasPreserveMode(String swigName, AliasPreserveMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static AliasPreserveMode[] swigValues = { ConvertAlias, PreserveAlias };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class AutoCompletionMode {
    public final static mdParse.AutoCompletionMode AutoCompleteSingleSuite = new mdParse.AutoCompletionMode("AutoCompleteSingleSuite", mdAddrJavaWrapperJNI.mdParse_AutoCompleteSingleSuite_get());
    public final static mdParse.AutoCompletionMode AutoCompleteRangedSuite = new mdParse.AutoCompletionMode("AutoCompleteRangedSuite");
    public final static mdParse.AutoCompletionMode AutoCompletePlaceHolderSuite = new mdParse.AutoCompletionMode("AutoCompletePlaceHolderSuite");
    public final static mdParse.AutoCompletionMode AutoCompleteNoSuite = new mdParse.AutoCompletionMode("AutoCompleteNoSuite");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static AutoCompletionMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + AutoCompletionMode.class + " with value " + swigValue);
    }

    private AutoCompletionMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private AutoCompletionMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private AutoCompletionMode(String swigName, AutoCompletionMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static AutoCompletionMode[] swigValues = { AutoCompleteSingleSuite, AutoCompleteRangedSuite, AutoCompletePlaceHolderSuite, AutoCompleteNoSuite };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class ResultCdDescOpt {
    public final static mdParse.ResultCdDescOpt ResultCodeDescriptionLong = new mdParse.ResultCdDescOpt("ResultCodeDescriptionLong", mdAddrJavaWrapperJNI.mdParse_ResultCodeDescriptionLong_get());
    public final static mdParse.ResultCdDescOpt ResultCodeDescriptionShort = new mdParse.ResultCdDescOpt("ResultCodeDescriptionShort");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ResultCdDescOpt swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ResultCdDescOpt.class + " with value " + swigValue);
    }

    private ResultCdDescOpt(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ResultCdDescOpt(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ResultCdDescOpt(String swigName, ResultCdDescOpt swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ResultCdDescOpt[] swigValues = { ResultCodeDescriptionLong, ResultCodeDescriptionShort };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class MailboxLookupMode {
    public final static mdParse.MailboxLookupMode MailboxNone = new mdParse.MailboxLookupMode("MailboxNone", mdAddrJavaWrapperJNI.mdParse_MailboxNone_get());
    public final static mdParse.MailboxLookupMode MailboxExpress = new mdParse.MailboxLookupMode("MailboxExpress");
    public final static mdParse.MailboxLookupMode MailboxPremium = new mdParse.MailboxLookupMode("MailboxPremium");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static MailboxLookupMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + MailboxLookupMode.class + " with value " + swigValue);
    }

    private MailboxLookupMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private MailboxLookupMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private MailboxLookupMode(String swigName, MailboxLookupMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static MailboxLookupMode[] swigValues = { MailboxNone, MailboxExpress, MailboxPremium };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
