/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.melissadata;

public class mdGeo {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  public mdGeo(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  public static long getCPtr(mdGeo obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        mdGeoJavaWrapperJNI.delete_mdGeo(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public mdGeo() {
    this(mdGeoJavaWrapperJNI.new_mdGeo(), true);
  }

  public void SetPathToGeoCodeDataFiles(String arg0) {
    mdGeoJavaWrapperJNI.mdGeo_SetPathToGeoCodeDataFiles(swigCPtr, this, arg0);
  }

  public void SetPathToGeoPointDataFiles(String arg0) {
    mdGeoJavaWrapperJNI.mdGeo_SetPathToGeoPointDataFiles(swigCPtr, this, arg0);
  }

  public void SetPathToGeoCanadaDataFiles(String arg0) {
    mdGeoJavaWrapperJNI.mdGeo_SetPathToGeoCanadaDataFiles(swigCPtr, this, arg0);
  }

  public boolean SetLicenseString(String License) {
    return mdGeoJavaWrapperJNI.mdGeo_SetLicenseString(swigCPtr, this, License);
  }

  public mdGeo.ProgramStatus Initialize(String DataPath, String IndexPath) {
    return mdGeo.ProgramStatus.swigToEnum(mdGeoJavaWrapperJNI.mdGeo_Initialize(swigCPtr, this, DataPath, IndexPath));
  }

  public mdGeo.ProgramStatus InitializeDataFiles() {
    return mdGeo.ProgramStatus.swigToEnum(mdGeoJavaWrapperJNI.mdGeo_InitializeDataFiles(swigCPtr, this));
  }

  public String GetInitializeErrorString() {
    return mdGeoJavaWrapperJNI.mdGeo_GetInitializeErrorString(swigCPtr, this);
  }

  public String GetBuildNumber() {
    return mdGeoJavaWrapperJNI.mdGeo_GetBuildNumber(swigCPtr, this);
  }

  public String GetDatabaseDate() {
    return mdGeoJavaWrapperJNI.mdGeo_GetDatabaseDate(swigCPtr, this);
  }

  public String GetExpirationDate() {
    return mdGeoJavaWrapperJNI.mdGeo_GetExpirationDate(swigCPtr, this);
  }

  public String GetLicenseExpirationDate() {
    return mdGeoJavaWrapperJNI.mdGeo_GetLicenseExpirationDate(swigCPtr, this);
  }

  public int GeoCode(String Zip, String Plus4) {
    return mdGeoJavaWrapperJNI.mdGeo_GeoCode__SWIG_0(swigCPtr, this, Zip, Plus4);
  }

  public int GeoCode(String Zip) {
    return mdGeoJavaWrapperJNI.mdGeo_GeoCode__SWIG_1(swigCPtr, this, Zip);
  }

  public int GeoPoint(String Zip, String Plus4, String DeliveryPointCode) {
    return mdGeoJavaWrapperJNI.mdGeo_GeoPoint(swigCPtr, this, Zip, Plus4, DeliveryPointCode);
  }

  public double ComputeDistance(double Latitude1, double Longitude1, double Latitude2, double Longitude2) {
    return mdGeoJavaWrapperJNI.mdGeo_ComputeDistance(swigCPtr, this, Latitude1, Longitude1, Latitude2, Longitude2);
  }

  public double ComputeBearing(double Latitude1, double Longitude1, double Latitude2, double Longitude2) {
    return mdGeoJavaWrapperJNI.mdGeo_ComputeBearing(swigCPtr, this, Latitude1, Longitude1, Latitude2, Longitude2);
  }

  public String GetErrorCode() {
    return mdGeoJavaWrapperJNI.mdGeo_GetErrorCode(swigCPtr, this);
  }

  public String GetStatusCode() {
    return mdGeoJavaWrapperJNI.mdGeo_GetStatusCode(swigCPtr, this);
  }

  public String GetResults() {
    return mdGeoJavaWrapperJNI.mdGeo_GetResults(swigCPtr, this);
  }

  public String GetLatitude() {
    return mdGeoJavaWrapperJNI.mdGeo_GetLatitude(swigCPtr, this);
  }

  public String GetLongitude() {
    return mdGeoJavaWrapperJNI.mdGeo_GetLongitude(swigCPtr, this);
  }

  public String GetCensusTract() {
    return mdGeoJavaWrapperJNI.mdGeo_GetCensusTract(swigCPtr, this);
  }

  public String GetCensusBlock() {
    return mdGeoJavaWrapperJNI.mdGeo_GetCensusBlock(swigCPtr, this);
  }

  public String GetCountyFips() {
    return mdGeoJavaWrapperJNI.mdGeo_GetCountyFips(swigCPtr, this);
  }

  public String GetCountyName() {
    return mdGeoJavaWrapperJNI.mdGeo_GetCountyName(swigCPtr, this);
  }

  public String GetPlaceCode() {
    return mdGeoJavaWrapperJNI.mdGeo_GetPlaceCode(swigCPtr, this);
  }

  public String GetPlaceName() {
    return mdGeoJavaWrapperJNI.mdGeo_GetPlaceName(swigCPtr, this);
  }

  public String GetTimeZoneCode() {
    return mdGeoJavaWrapperJNI.mdGeo_GetTimeZoneCode(swigCPtr, this);
  }

  public String GetTimeZone() {
    return mdGeoJavaWrapperJNI.mdGeo_GetTimeZone(swigCPtr, this);
  }

  public String GetCBSACode() {
    return mdGeoJavaWrapperJNI.mdGeo_GetCBSACode(swigCPtr, this);
  }

  public String GetCBSATitle() {
    return mdGeoJavaWrapperJNI.mdGeo_GetCBSATitle(swigCPtr, this);
  }

  public String GetCBSALevel() {
    return mdGeoJavaWrapperJNI.mdGeo_GetCBSALevel(swigCPtr, this);
  }

  public String GetCBSADivisionCode() {
    return mdGeoJavaWrapperJNI.mdGeo_GetCBSADivisionCode(swigCPtr, this);
  }

  public String GetCBSADivisionTitle() {
    return mdGeoJavaWrapperJNI.mdGeo_GetCBSADivisionTitle(swigCPtr, this);
  }

  public String GetCBSADivisionLevel() {
    return mdGeoJavaWrapperJNI.mdGeo_GetCBSADivisionLevel(swigCPtr, this);
  }

  public final static class ProgramStatus {
    public final static ProgramStatus ErrorNone = new ProgramStatus("ErrorNone", mdGeoJavaWrapperJNI.mdGeo_ErrorNone_get());
    public final static ProgramStatus ErrorOther = new ProgramStatus("ErrorOther");
    public final static ProgramStatus ErrorOutOfMemory = new ProgramStatus("ErrorOutOfMemory");
    public final static ProgramStatus ErrorRequiredFileNotFound = new ProgramStatus("ErrorRequiredFileNotFound");
    public final static ProgramStatus ErrorFoundOldFile = new ProgramStatus("ErrorFoundOldFile");
    public final static ProgramStatus ErrorDatabaseExpired = new ProgramStatus("ErrorDatabaseExpired");
    public final static ProgramStatus ErrorLicenseExpired = new ProgramStatus("ErrorLicenseExpired");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ProgramStatus swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ProgramStatus.class + " with value " + swigValue);
    }

    private ProgramStatus(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ProgramStatus(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ProgramStatus(String swigName, ProgramStatus swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ProgramStatus[] swigValues = { ErrorNone, ErrorOther, ErrorOutOfMemory, ErrorRequiredFileNotFound, ErrorFoundOldFile, ErrorDatabaseExpired, ErrorLicenseExpired };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class AccessType {
    public final static AccessType Local = new AccessType("Local", mdGeoJavaWrapperJNI.mdGeo_Local_get());
    public final static AccessType Remote = new AccessType("Remote");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static AccessType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + AccessType.class + " with value " + swigValue);
    }

    private AccessType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private AccessType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private AccessType(String swigName, AccessType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static AccessType[] swigValues = { Local, Remote };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class DiacriticsMode {
    public final static DiacriticsMode Auto = new DiacriticsMode("Auto", mdGeoJavaWrapperJNI.mdGeo_Auto_get());
    public final static DiacriticsMode On = new DiacriticsMode("On");
    public final static DiacriticsMode Off = new DiacriticsMode("Off");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static DiacriticsMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + DiacriticsMode.class + " with value " + swigValue);
    }

    private DiacriticsMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private DiacriticsMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private DiacriticsMode(String swigName, DiacriticsMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static DiacriticsMode[] swigValues = { Auto, On, Off };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class SortationCode {
    public final static SortationCode FCM_LTR_AUTO_NONAUTO = new SortationCode("FCM_LTR_AUTO_NONAUTO", mdGeoJavaWrapperJNI.mdGeo_FCM_LTR_AUTO_NONAUTO_get());
    public final static SortationCode FCM_LTR_AUTO = new SortationCode("FCM_LTR_AUTO");
    public final static SortationCode FCM_LTR_NONAUTO = new SortationCode("FCM_LTR_NONAUTO");
    public final static SortationCode FCM_LTR_NONMACH = new SortationCode("FCM_LTR_NONMACH");
    public final static SortationCode FCM_POSTCARD_AUTO_NONAUTO = new SortationCode("FCM_POSTCARD_AUTO_NONAUTO", mdGeoJavaWrapperJNI.mdGeo_FCM_POSTCARD_AUTO_NONAUTO_get());
    public final static SortationCode FCM_POSTCARD_AUTO = new SortationCode("FCM_POSTCARD_AUTO");
    public final static SortationCode FCM_POSTCARD_NONAUTO = new SortationCode("FCM_POSTCARD_NONAUTO");
    public final static SortationCode FCM_FLAT_COTRAY = new SortationCode("FCM_FLAT_COTRAY", mdGeoJavaWrapperJNI.mdGeo_FCM_FLAT_COTRAY_get());
    public final static SortationCode FCM_FLAT_AUTO = new SortationCode("FCM_FLAT_AUTO");
    public final static SortationCode FCM_FLAT_NONAUTO = new SortationCode("FCM_FLAT_NONAUTO");
    public final static SortationCode FCM_FLAT_DISABLE_COTRAY = new SortationCode("FCM_FLAT_DISABLE_COTRAY");
    public final static SortationCode FCM_FLAT_COTRAY_FSM1000 = new SortationCode("FCM_FLAT_COTRAY_FSM1000");
    public final static SortationCode FCM_FLAT_DISABLE_COTRAY_FSM1000 = new SortationCode("FCM_FLAT_DISABLE_COTRAY_FSM1000");
    public final static SortationCode FCM_FLAT_AUTO_FSM1000 = new SortationCode("FCM_FLAT_AUTO_FSM1000");
    public final static SortationCode FCM_FLAT_NONAUTO_FSM1000 = new SortationCode("FCM_FLAT_NONAUTO_FSM1000");
    public final static SortationCode STD_LTR_ECRRT_AUTO_NONAUTO = new SortationCode("STD_LTR_ECRRT_AUTO_NONAUTO", mdGeoJavaWrapperJNI.mdGeo_STD_LTR_ECRRT_AUTO_NONAUTO_get());
    public final static SortationCode STD_LTR_ECRRT_NONAUTO = new SortationCode("STD_LTR_ECRRT_NONAUTO");
    public final static SortationCode STD_LTR_AUTO_NONAUTO = new SortationCode("STD_LTR_AUTO_NONAUTO");
    public final static SortationCode STD_LTR_AUTO = new SortationCode("STD_LTR_AUTO");
    public final static SortationCode STD_LTR_NONAUTO = new SortationCode("STD_LTR_NONAUTO");
    public final static SortationCode STD_LTR_NONMACH = new SortationCode("STD_LTR_NONMACH");
    public final static SortationCode STD_LTR_ECRRT_NONMACH = new SortationCode("STD_LTR_ECRRT_NONMACH");
    public final static SortationCode STD_LTR_ECRRT_AUTO = new SortationCode("STD_LTR_ECRRT_AUTO");
    public final static SortationCode STD_LTR_ECRRT = new SortationCode("STD_LTR_ECRRT");
    public final static SortationCode STD_FLAT_ECRRT_COSACK = new SortationCode("STD_FLAT_ECRRT_COSACK", mdGeoJavaWrapperJNI.mdGeo_STD_FLAT_ECRRT_COSACK_get());
    public final static SortationCode STD_FLAT_ECRRT_DISABLE_COSACK = new SortationCode("STD_FLAT_ECRRT_DISABLE_COSACK");
    public final static SortationCode STD_FLAT_COSACK = new SortationCode("STD_FLAT_COSACK");
    public final static SortationCode STD_FLAT_DISABLE_COSACK = new SortationCode("STD_FLAT_DISABLE_COSACK");
    public final static SortationCode STD_FLAT_AUTO = new SortationCode("STD_FLAT_AUTO");
    public final static SortationCode STD_FLAT_NONAUTO = new SortationCode("STD_FLAT_NONAUTO");
    public final static SortationCode STD_FLAT_ECRRT_AUTO = new SortationCode("STD_FLAT_ECRRT_AUTO");
    public final static SortationCode STD_FLAT_ECRRT_NONAUTO = new SortationCode("STD_FLAT_ECRRT_NONAUTO");
    public final static SortationCode STD_FLAT_ECRRT = new SortationCode("STD_FLAT_ECRRT");
    public final static SortationCode RESIDUALS_LEFT = new SortationCode("RESIDUALS_LEFT", mdGeoJavaWrapperJNI.mdGeo_RESIDUALS_LEFT_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static SortationCode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + SortationCode.class + " with value " + swigValue);
    }

    private SortationCode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private SortationCode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private SortationCode(String swigName, SortationCode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static SortationCode[] swigValues = { FCM_LTR_AUTO_NONAUTO, FCM_LTR_AUTO, FCM_LTR_NONAUTO, FCM_LTR_NONMACH, FCM_POSTCARD_AUTO_NONAUTO, FCM_POSTCARD_AUTO, FCM_POSTCARD_NONAUTO, FCM_FLAT_COTRAY, FCM_FLAT_AUTO, FCM_FLAT_NONAUTO, FCM_FLAT_DISABLE_COTRAY, FCM_FLAT_COTRAY_FSM1000, FCM_FLAT_DISABLE_COTRAY_FSM1000, FCM_FLAT_AUTO_FSM1000, FCM_FLAT_NONAUTO_FSM1000, STD_LTR_ECRRT_AUTO_NONAUTO, STD_LTR_ECRRT_NONAUTO, STD_LTR_AUTO_NONAUTO, STD_LTR_AUTO, STD_LTR_NONAUTO, STD_LTR_NONMACH, STD_LTR_ECRRT_NONMACH, STD_LTR_ECRRT_AUTO, STD_LTR_ECRRT, STD_FLAT_ECRRT_COSACK, STD_FLAT_ECRRT_DISABLE_COSACK, STD_FLAT_COSACK, STD_FLAT_DISABLE_COSACK, STD_FLAT_AUTO, STD_FLAT_NONAUTO, STD_FLAT_ECRRT_AUTO, STD_FLAT_ECRRT_NONAUTO, STD_FLAT_ECRRT, RESIDUALS_LEFT };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
