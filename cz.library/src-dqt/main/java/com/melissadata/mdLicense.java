/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */
package com.melissadata;

public class mdLicense {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected mdLicense(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(mdLicense obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        mdLicenseJavaWrapperJNI.delete_mdLicense(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public mdLicense() {
    this(mdLicenseJavaWrapperJNI.new_mdLicense(), true);
  }

  public void ClearProperties() {
    mdLicenseJavaWrapperJNI.mdLicense_ClearProperties(swigCPtr, this);
  }

  public void SetExpirationPolicy(mdLicense.ExpirationPolicy Policy) {
    mdLicenseJavaWrapperJNI.mdLicense_SetExpirationPolicy(swigCPtr, this, Policy.swigValue());
  }

  public boolean SetLicense(String License, String EnvironmentVariable, String DemoEnvironmentVariable) {
    return mdLicenseJavaWrapperJNI.mdLicense_SetLicense__SWIG_0(swigCPtr, this, License, EnvironmentVariable, DemoEnvironmentVariable);
  }

  public boolean SetLicense(String License, String EnvironmentVariable) {
    return mdLicenseJavaWrapperJNI.mdLicense_SetLicense__SWIG_1(swigCPtr, this, License, EnvironmentVariable);
  }

  public boolean SetLicense(String License) {
    return mdLicenseJavaWrapperJNI.mdLicense_SetLicense__SWIG_2(swigCPtr, this, License);
  }

  public boolean SetLicense() {
    return mdLicenseJavaWrapperJNI.mdLicense_SetLicense__SWIG_3(swigCPtr, this);
  }

  public void SetKeyInfo(String PublicMod, String PublicKey, String PrivateKey) {
    mdLicenseJavaWrapperJNI.mdLicense_SetKeyInfo(swigCPtr, this, PublicMod, PublicKey, PrivateKey);
  }

  public String GetLicense() {
    return mdLicenseJavaWrapperJNI.mdLicense_GetLicense(swigCPtr, this);
  }

  public String GetSerialNumber() {
    return mdLicenseJavaWrapperJNI.mdLicense_GetSerialNumber(swigCPtr, this);
  }

  public String GetProduct() {
    return mdLicenseJavaWrapperJNI.mdLicense_GetProduct(swigCPtr, this);
  }

  public String GetProductOptions() {
    return mdLicenseJavaWrapperJNI.mdLicense_GetProductOptions(swigCPtr, this);
  }

  public String GetApprovalNo() {
    return mdLicenseJavaWrapperJNI.mdLicense_GetApprovalNo(swigCPtr, this);
  }

  public String GetCustomerCode() {
    return mdLicenseJavaWrapperJNI.mdLicense_GetCustomerCode(swigCPtr, this);
  }

  public boolean RemoveProperty(String Property) {
    return mdLicenseJavaWrapperJNI.mdLicense_RemoveProperty(swigCPtr, this, Property);
  }

  public String GetDecryptedLicense() {
    return mdLicenseJavaWrapperJNI.mdLicense_GetDecryptedLicense(swigCPtr, this);
  }

  public String GetLicenseExpirationDate() {
    return mdLicenseJavaWrapperJNI.mdLicense_GetLicenseExpirationDate(swigCPtr, this);
  }

  public String GetDatabaseDate() {
    return mdLicenseJavaWrapperJNI.mdLicense_GetDatabaseDate(swigCPtr, this);
  }

  public String GetDatabaseExpirationDate() {
    return mdLicenseJavaWrapperJNI.mdLicense_GetDatabaseExpirationDate(swigCPtr, this);
  }

  public mdLicense.TestLicenseResult TestLicense(String Product) {
    return mdLicense.TestLicenseResult.swigToEnum(mdLicenseJavaWrapperJNI.mdLicense_TestLicense(swigCPtr, this, Product));
  }

  public boolean IsProductOptionSet(String ProductOption) {
    return mdLicenseJavaWrapperJNI.mdLicense_IsProductOptionSet(swigCPtr, this, ProductOption);
  }

  public boolean IsLicenseDateValid() {
    return mdLicenseJavaWrapperJNI.mdLicense_IsLicenseDateValid(swigCPtr, this);
  }

  public boolean IsDatabaseDateValid() {
    return mdLicenseJavaWrapperJNI.mdLicense_IsDatabaseDateValid(swigCPtr, this);
  }

  public boolean IsDatabaseExpirationDateValid() {
    return mdLicenseJavaWrapperJNI.mdLicense_IsDatabaseExpirationDateValid(swigCPtr, this);
  }

  public boolean SetDatabaseDate(String DatabaseDate, mdLicense.DateFormat Format) {
    return mdLicenseJavaWrapperJNI.mdLicense_SetDatabaseDate(swigCPtr, this, DatabaseDate, Format.swigValue());
  }

  public boolean SetDatabaseExpirationDate(String ExpirationDate, mdLicense.DateFormat Format) {
    return mdLicenseJavaWrapperJNI.mdLicense_SetDatabaseExpirationDate(swigCPtr, this, ExpirationDate, Format.swigValue());
  }

  public static void DecryptString(String Encrypted, String Decrypted) {
    mdLicenseJavaWrapperJNI.mdLicense_DecryptString(Encrypted, Decrypted);
  }

  public mdLicense.TestTokenResult TestToken(String Token, String Package, String CurrentDateTime) {
    return mdLicense.TestTokenResult.swigToEnum(mdLicenseJavaWrapperJNI.mdLicense_TestToken(swigCPtr, this, Token, Package, CurrentDateTime));
  }

  public final static class ExpirationPolicy {
    public final static mdLicense.ExpirationPolicy NOMINAL_DATE = new mdLicense.ExpirationPolicy("NOMINAL_DATE");
    public final static mdLicense.ExpirationPolicy TUES_NO_HOLIDAYS = new mdLicense.ExpirationPolicy("TUES_NO_HOLIDAYS");
    public final static mdLicense.ExpirationPolicy END_OF_MONTH = new mdLicense.ExpirationPolicy("END_OF_MONTH");
    public final static mdLicense.ExpirationPolicy EOM_TUES_NO_HOLIDAYS = new mdLicense.ExpirationPolicy("EOM_TUES_NO_HOLIDAYS");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ExpirationPolicy swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ExpirationPolicy.class + " with value " + swigValue);
    }

    private ExpirationPolicy(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ExpirationPolicy(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ExpirationPolicy(String swigName, ExpirationPolicy swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ExpirationPolicy[] swigValues = { NOMINAL_DATE, TUES_NO_HOLIDAYS, END_OF_MONTH, EOM_TUES_NO_HOLIDAYS };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class DateFormat {
    public final static mdLicense.DateFormat dateYMD = new mdLicense.DateFormat("dateYMD", mdLicenseJavaWrapperJNI.mdLicense_dateYMD_get());
    public final static mdLicense.DateFormat dateMDY = new mdLicense.DateFormat("dateMDY", mdLicenseJavaWrapperJNI.mdLicense_dateMDY_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static DateFormat swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + DateFormat.class + " with value " + swigValue);
    }

    private DateFormat(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private DateFormat(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private DateFormat(String swigName, DateFormat swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static DateFormat[] swigValues = { dateYMD, dateMDY };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class TestLicenseResult {
    public final static mdLicense.TestLicenseResult tlicNoError = new mdLicense.TestLicenseResult("tlicNoError", mdLicenseJavaWrapperJNI.mdLicense_tlicNoError_get());
    public final static mdLicense.TestLicenseResult tlicInvalidLicense = new mdLicense.TestLicenseResult("tlicInvalidLicense", mdLicenseJavaWrapperJNI.mdLicense_tlicInvalidLicense_get());
    public final static mdLicense.TestLicenseResult tlicInvalidProduct = new mdLicense.TestLicenseResult("tlicInvalidProduct", mdLicenseJavaWrapperJNI.mdLicense_tlicInvalidProduct_get());
    public final static mdLicense.TestLicenseResult tlicLicenseExpired = new mdLicense.TestLicenseResult("tlicLicenseExpired", mdLicenseJavaWrapperJNI.mdLicense_tlicLicenseExpired_get());
    public final static mdLicense.TestLicenseResult tlicDatabaseExpired = new mdLicense.TestLicenseResult("tlicDatabaseExpired", mdLicenseJavaWrapperJNI.mdLicense_tlicDatabaseExpired_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static TestLicenseResult swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + TestLicenseResult.class + " with value " + swigValue);
    }

    private TestLicenseResult(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private TestLicenseResult(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private TestLicenseResult(String swigName, TestLicenseResult swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static TestLicenseResult[] swigValues = { tlicNoError, tlicInvalidLicense, tlicInvalidProduct, tlicLicenseExpired, tlicDatabaseExpired };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class TestTokenResult {
    public final static mdLicense.TestTokenResult ttokNoError = new mdLicense.TestTokenResult("ttokNoError", mdLicenseJavaWrapperJNI.mdLicense_ttokNoError_get());
    public final static mdLicense.TestTokenResult ttokInvalidToken = new mdLicense.TestTokenResult("ttokInvalidToken", mdLicenseJavaWrapperJNI.mdLicense_ttokInvalidToken_get());
    public final static mdLicense.TestTokenResult ttokInvalidPackage = new mdLicense.TestTokenResult("ttokInvalidPackage", mdLicenseJavaWrapperJNI.mdLicense_ttokInvalidPackage_get());
    public final static mdLicense.TestTokenResult ttokTokenExpired = new mdLicense.TestTokenResult("ttokTokenExpired", mdLicenseJavaWrapperJNI.mdLicense_ttokTokenExpired_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static TestTokenResult swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + TestTokenResult.class + " with value " + swigValue);
    }

    private TestTokenResult(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private TestTokenResult(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private TestTokenResult(String swigName, TestTokenResult swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static TestTokenResult[] swigValues = { ttokNoError, ttokInvalidToken, ttokInvalidPackage, ttokTokenExpired };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
