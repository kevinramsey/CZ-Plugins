/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.melissadata;

public class mdZip {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected mdZip(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(mdZip obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        mdAddrJavaWrapperJNI.delete_mdZip(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public mdZip() {
    this(mdAddrJavaWrapperJNI.new_mdZip(), true);
  }

  public mdZip.ProgramStatus Initialize(String arg0, String arg1, String arg2) {
    return mdZip.ProgramStatus.swigToEnum(mdAddrJavaWrapperJNI.mdZip_Initialize(swigCPtr, this, arg0, arg1, arg2));
  }

  public String GetInitializeErrorString() {
    return mdAddrJavaWrapperJNI.mdZip_GetInitializeErrorString(swigCPtr, this);
  }

  public String GetDatabaseDate() {
    return mdAddrJavaWrapperJNI.mdZip_GetDatabaseDate(swigCPtr, this);
  }

  public String GetBuildNumber() {
    return mdAddrJavaWrapperJNI.mdZip_GetBuildNumber(swigCPtr, this);
  }

  public boolean SetLicenseString(String arg0) {
    return mdAddrJavaWrapperJNI.mdZip_SetLicenseString(swigCPtr, this, arg0);
  }

  public String GetLicenseExpirationDate() {
    return mdAddrJavaWrapperJNI.mdZip_GetLicenseExpirationDate(swigCPtr, this);
  }

  public boolean FindZip(String arg0, boolean arg1) {
    return mdAddrJavaWrapperJNI.mdZip_FindZip(swigCPtr, this, arg0, arg1);
  }

  public boolean FindZipNext() {
    return mdAddrJavaWrapperJNI.mdZip_FindZipNext(swigCPtr, this);
  }

  public boolean FindZipInCity(String arg0, String arg1) {
    return mdAddrJavaWrapperJNI.mdZip_FindZipInCity(swigCPtr, this, arg0, arg1);
  }

  public boolean FindZipInCityNext() {
    return mdAddrJavaWrapperJNI.mdZip_FindZipInCityNext(swigCPtr, this);
  }

  public boolean FindCityInState(String arg0, String arg1) {
    return mdAddrJavaWrapperJNI.mdZip_FindCityInState(swigCPtr, this, arg0, arg1);
  }

  public boolean FindCityInStateNext() {
    return mdAddrJavaWrapperJNI.mdZip_FindCityInStateNext(swigCPtr, this);
  }

  public double ComputeDistance(double arg0, double arg1, double arg2, double arg3) {
    return mdAddrJavaWrapperJNI.mdZip_ComputeDistance(swigCPtr, this, arg0, arg1, arg2, arg3);
  }

  public double ComputeBearing(double arg0, double arg1, double arg2, double arg3) {
    return mdAddrJavaWrapperJNI.mdZip_ComputeBearing(swigCPtr, this, arg0, arg1, arg2, arg3);
  }

  public String GetCountyNameFromFips(String arg0) {
    return mdAddrJavaWrapperJNI.mdZip_GetCountyNameFromFips(swigCPtr, this, arg0);
  }

  public int GetSCFArea(String arg0, SWIGTYPE_p_float arg1, SWIGTYPE_p_float arg2, SWIGTYPE_p_float arg3, SWIGTYPE_p_float arg4) {
    return mdAddrJavaWrapperJNI.mdZip_GetSCFArea(swigCPtr, this, arg0, SWIGTYPE_p_float.getCPtr(arg1), SWIGTYPE_p_float.getCPtr(arg2), SWIGTYPE_p_float.getCPtr(arg3), SWIGTYPE_p_float.getCPtr(arg4));
  }

  public String GetZip() {
    return mdAddrJavaWrapperJNI.mdZip_GetZip(swigCPtr, this);
  }

  public String GetCity() {
    return mdAddrJavaWrapperJNI.mdZip_GetCity(swigCPtr, this);
  }

  public String GetCityAbbreviation() {
    return mdAddrJavaWrapperJNI.mdZip_GetCityAbbreviation(swigCPtr, this);
  }

  public String GetState() {
    return mdAddrJavaWrapperJNI.mdZip_GetState(swigCPtr, this);
  }

  public String GetZipType() {
    return mdAddrJavaWrapperJNI.mdZip_GetZipType(swigCPtr, this);
  }

  public String GetCountyName() {
    return mdAddrJavaWrapperJNI.mdZip_GetCountyName(swigCPtr, this);
  }

  public String GetCountyFips() {
    return mdAddrJavaWrapperJNI.mdZip_GetCountyFips(swigCPtr, this);
  }

  public String GetAreaCode() {
    return mdAddrJavaWrapperJNI.mdZip_GetAreaCode(swigCPtr, this);
  }

  public String GetLongitude() {
    return mdAddrJavaWrapperJNI.mdZip_GetLongitude(swigCPtr, this);
  }

  public String GetLatitude() {
    return mdAddrJavaWrapperJNI.mdZip_GetLatitude(swigCPtr, this);
  }

  public String GetTimeZone() {
    return mdAddrJavaWrapperJNI.mdZip_GetTimeZone(swigCPtr, this);
  }

  public String GetTimeZoneCode() {
    return mdAddrJavaWrapperJNI.mdZip_GetTimeZoneCode(swigCPtr, this);
  }

  public String GetMsa() {
    return mdAddrJavaWrapperJNI.mdZip_GetMsa(swigCPtr, this);
  }

  public String GetPmsa() {
    return mdAddrJavaWrapperJNI.mdZip_GetPmsa(swigCPtr, this);
  }

  public String GetFacilityCode() {
    return mdAddrJavaWrapperJNI.mdZip_GetFacilityCode(swigCPtr, this);
  }

  public String GetLastLineIndicator() {
    return mdAddrJavaWrapperJNI.mdZip_GetLastLineIndicator(swigCPtr, this);
  }

  public String GetLastLineNumber() {
    return mdAddrJavaWrapperJNI.mdZip_GetLastLineNumber(swigCPtr, this);
  }

  public String GetPreferredLastLineNumber() {
    return mdAddrJavaWrapperJNI.mdZip_GetPreferredLastLineNumber(swigCPtr, this);
  }

  public String GetAutomation() {
    return mdAddrJavaWrapperJNI.mdZip_GetAutomation(swigCPtr, this);
  }

  public String GetFinanceNumber() {
    return mdAddrJavaWrapperJNI.mdZip_GetFinanceNumber(swigCPtr, this);
  }

  public final static class ProgramStatus {
    public final static mdZip.ProgramStatus ErrorNone = new mdZip.ProgramStatus("ErrorNone", mdAddrJavaWrapperJNI.mdZip_ErrorNone_get());
    public final static mdZip.ProgramStatus ErrorOther = new mdZip.ProgramStatus("ErrorOther");
    public final static mdZip.ProgramStatus ErrorOutOfMemory = new mdZip.ProgramStatus("ErrorOutOfMemory");
    public final static mdZip.ProgramStatus ErrorRequiredFileNotFound = new mdZip.ProgramStatus("ErrorRequiredFileNotFound");
    public final static mdZip.ProgramStatus ErrorFoundOldFile = new mdZip.ProgramStatus("ErrorFoundOldFile");
    public final static mdZip.ProgramStatus ErrorDatabaseExpired = new mdZip.ProgramStatus("ErrorDatabaseExpired");
    public final static mdZip.ProgramStatus ErrorLicenseExpired = new mdZip.ProgramStatus("ErrorLicenseExpired");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ProgramStatus swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ProgramStatus.class + " with value " + swigValue);
    }

    private ProgramStatus(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ProgramStatus(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ProgramStatus(String swigName, ProgramStatus swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ProgramStatus[] swigValues = { ErrorNone, ErrorOther, ErrorOutOfMemory, ErrorRequiredFileNotFound, ErrorFoundOldFile, ErrorDatabaseExpired, ErrorLicenseExpired };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class AccessType {
    public final static mdZip.AccessType Local = new mdZip.AccessType("Local", mdAddrJavaWrapperJNI.mdZip_Local_get());
    public final static mdZip.AccessType Remote = new mdZip.AccessType("Remote");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static AccessType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + AccessType.class + " with value " + swigValue);
    }

    private AccessType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private AccessType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private AccessType(String swigName, AccessType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static AccessType[] swigValues = { Local, Remote };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class DiacriticsMode {
    public final static mdZip.DiacriticsMode Auto = new mdZip.DiacriticsMode("Auto", mdAddrJavaWrapperJNI.mdZip_Auto_get());
    public final static mdZip.DiacriticsMode On = new mdZip.DiacriticsMode("On");
    public final static mdZip.DiacriticsMode Off = new mdZip.DiacriticsMode("Off");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static DiacriticsMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + DiacriticsMode.class + " with value " + swigValue);
    }

    private DiacriticsMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private DiacriticsMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private DiacriticsMode(String swigName, DiacriticsMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static DiacriticsMode[] swigValues = { Auto, On, Off };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class StandardizeMode {
    public final static mdZip.StandardizeMode ShortFormat = new mdZip.StandardizeMode("ShortFormat", mdAddrJavaWrapperJNI.mdZip_ShortFormat_get());
    public final static mdZip.StandardizeMode LongFormat = new mdZip.StandardizeMode("LongFormat");
    public final static mdZip.StandardizeMode AutoFormat = new mdZip.StandardizeMode("AutoFormat");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static StandardizeMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + StandardizeMode.class + " with value " + swigValue);
    }

    private StandardizeMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private StandardizeMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private StandardizeMode(String swigName, StandardizeMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static StandardizeMode[] swigValues = { ShortFormat, LongFormat, AutoFormat };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class SuiteParseMode {
    public final static mdZip.SuiteParseMode ParseSuite = new mdZip.SuiteParseMode("ParseSuite", mdAddrJavaWrapperJNI.mdZip_ParseSuite_get());
    public final static mdZip.SuiteParseMode CombineSuite = new mdZip.SuiteParseMode("CombineSuite");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static SuiteParseMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + SuiteParseMode.class + " with value " + swigValue);
    }

    private SuiteParseMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private SuiteParseMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private SuiteParseMode(String swigName, SuiteParseMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static SuiteParseMode[] swigValues = { ParseSuite, CombineSuite };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class AliasPreserveMode {
    public final static mdZip.AliasPreserveMode ConvertAlias = new mdZip.AliasPreserveMode("ConvertAlias", mdAddrJavaWrapperJNI.mdZip_ConvertAlias_get());
    public final static mdZip.AliasPreserveMode PreserveAlias = new mdZip.AliasPreserveMode("PreserveAlias");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static AliasPreserveMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + AliasPreserveMode.class + " with value " + swigValue);
    }

    private AliasPreserveMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private AliasPreserveMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private AliasPreserveMode(String swigName, AliasPreserveMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static AliasPreserveMode[] swigValues = { ConvertAlias, PreserveAlias };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class AutoCompletionMode {
    public final static mdZip.AutoCompletionMode AutoCompleteSingleSuite = new mdZip.AutoCompletionMode("AutoCompleteSingleSuite", mdAddrJavaWrapperJNI.mdZip_AutoCompleteSingleSuite_get());
    public final static mdZip.AutoCompletionMode AutoCompleteRangedSuite = new mdZip.AutoCompletionMode("AutoCompleteRangedSuite");
    public final static mdZip.AutoCompletionMode AutoCompletePlaceHolderSuite = new mdZip.AutoCompletionMode("AutoCompletePlaceHolderSuite");
    public final static mdZip.AutoCompletionMode AutoCompleteNoSuite = new mdZip.AutoCompletionMode("AutoCompleteNoSuite");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static AutoCompletionMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + AutoCompletionMode.class + " with value " + swigValue);
    }

    private AutoCompletionMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private AutoCompletionMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private AutoCompletionMode(String swigName, AutoCompletionMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static AutoCompletionMode[] swigValues = { AutoCompleteSingleSuite, AutoCompleteRangedSuite, AutoCompletePlaceHolderSuite, AutoCompleteNoSuite };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class ResultCdDescOpt {
    public final static mdZip.ResultCdDescOpt ResultCodeDescriptionLong = new mdZip.ResultCdDescOpt("ResultCodeDescriptionLong", mdAddrJavaWrapperJNI.mdZip_ResultCodeDescriptionLong_get());
    public final static mdZip.ResultCdDescOpt ResultCodeDescriptionShort = new mdZip.ResultCdDescOpt("ResultCodeDescriptionShort");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ResultCdDescOpt swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ResultCdDescOpt.class + " with value " + swigValue);
    }

    private ResultCdDescOpt(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ResultCdDescOpt(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ResultCdDescOpt(String swigName, ResultCdDescOpt swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ResultCdDescOpt[] swigValues = { ResultCodeDescriptionLong, ResultCodeDescriptionShort };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class MailboxLookupMode {
    public final static mdZip.MailboxLookupMode MailboxNone = new mdZip.MailboxLookupMode("MailboxNone", mdAddrJavaWrapperJNI.mdZip_MailboxNone_get());
    public final static mdZip.MailboxLookupMode MailboxExpress = new mdZip.MailboxLookupMode("MailboxExpress");
    public final static mdZip.MailboxLookupMode MailboxPremium = new mdZip.MailboxLookupMode("MailboxPremium");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static MailboxLookupMode swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + MailboxLookupMode.class + " with value " + swigValue);
    }

    private MailboxLookupMode(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private MailboxLookupMode(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private MailboxLookupMode(String swigName, MailboxLookupMode swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static MailboxLookupMode[] swigValues = { MailboxNone, MailboxExpress, MailboxPremium };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
