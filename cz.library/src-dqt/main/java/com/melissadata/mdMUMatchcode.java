/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 3.0.5
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.melissadata;

public class mdMUMatchcode {
  private long swigCPtr;
  protected boolean swigCMemOwn;

  protected mdMUMatchcode(long cPtr, boolean cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = cPtr;
  }

  protected static long getCPtr(mdMUMatchcode obj) {
    return (obj == null) ? 0 : obj.swigCPtr;
  }

  protected void finalize() {
    delete();
  }

  public synchronized void delete() {
    if (swigCPtr != 0) {
      if (swigCMemOwn) {
        swigCMemOwn = false;
        mdMatchUpJavaWrapperJNI.delete_mdMUMatchcode(swigCPtr);
      }
      swigCPtr = 0;
    }
  }

  public void setI(SWIGTYPE_p_mdMUMatchcode_ value) {
    mdMatchUpJavaWrapperJNI.mdMUMatchcode_I_set(swigCPtr, this, SWIGTYPE_p_mdMUMatchcode_.getCPtr(value));
  }

  public SWIGTYPE_p_mdMUMatchcode_ getI() {
    long cPtr = mdMatchUpJavaWrapperJNI.mdMUMatchcode_I_get(swigCPtr, this);
    return (cPtr == 0) ? null : new SWIGTYPE_p_mdMUMatchcode_(cPtr, false);
  }

  public mdMUMatchcode() {
    this(mdMatchUpJavaWrapperJNI.new_mdMUMatchcode(), true);
  }

  public void SetPathToMatchUpFiles(String Path) {
    mdMatchUpJavaWrapperJNI.mdMUMatchcode_SetPathToMatchUpFiles(swigCPtr, this, Path);
  }

  public ProgramStatus InitializeDataFiles() {
    return ProgramStatus.swigToEnum(mdMatchUpJavaWrapperJNI.mdMUMatchcode_InitializeDataFiles(swigCPtr, this));
  }

  public String GetInitializeErrorString() {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_GetInitializeErrorString(swigCPtr, this);
  }

  public int FindMatchcode(String Matchcode) {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_FindMatchcode(swigCPtr, this, Matchcode);
  }

  public String GetMatchcodeName() {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_GetMatchcodeName(swigCPtr, this);
  }

  public void SetDescription(String Description) {
    mdMatchUpJavaWrapperJNI.mdMUMatchcode_SetDescription(swigCPtr, this, Description);
  }

  public String GetDescription() {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_GetDescription(swigCPtr, this);
  }

  public void SetNGram(int NGram) {
    mdMatchUpJavaWrapperJNI.mdMUMatchcode_SetNGram(swigCPtr, this, NGram);
  }

  public int GetNGram() {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_GetNGram(swigCPtr, this);
  }

  public int GetMatchcodeItemCount() {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_GetMatchcodeItemCount(swigCPtr, this);
  }

  public mdMUMatchcodeComponent GetMatchcodeItem(int Pos) {
    long cPtr = mdMatchUpJavaWrapperJNI.mdMUMatchcode_GetMatchcodeItem(swigCPtr, this, Pos);
    return (cPtr == 0) ? null : new mdMUMatchcodeComponent(cPtr, false);
  }

  public int GetMappingItemCount() {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_GetMappingItemCount(swigCPtr, this);
  }

  public MatchcodeMappingTarget GetMappingItemType(int Pos) {
    return MatchcodeMappingTarget.swigToEnum(mdMatchUpJavaWrapperJNI.mdMUMatchcode_GetMappingItemType(swigCPtr, this, Pos));
  }

  public String GetMappingItemLabel(int Pos) {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_GetMappingItemLabel(swigCPtr, this, Pos);
  }

  public MatchcodeStatus AddMatchcodeItem(mdMUMatchcodeComponent Item) {
    return MatchcodeStatus.swigToEnum(mdMatchUpJavaWrapperJNI.mdMUMatchcode_AddMatchcodeItem(swigCPtr, this, mdMUMatchcodeComponent.getCPtr(Item), Item));
  }

  public MatchcodeStatus InsertMatchcodeItem(int Pos, mdMUMatchcodeComponent Item) {
    return MatchcodeStatus.swigToEnum(mdMatchUpJavaWrapperJNI.mdMUMatchcode_InsertMatchcodeItem(swigCPtr, this, Pos, mdMUMatchcodeComponent.getCPtr(Item), Item));
  }

  public MatchcodeStatus ChangeMatchcodeItem(int Pos, mdMUMatchcodeComponent Item) {
    return MatchcodeStatus.swigToEnum(mdMatchUpJavaWrapperJNI.mdMUMatchcode_ChangeMatchcodeItem(swigCPtr, this, Pos, mdMUMatchcodeComponent.getCPtr(Item), Item));
  }

  public MatchcodeStatus DeleteMatchcodeItem(int Pos) {
    return MatchcodeStatus.swigToEnum(mdMatchUpJavaWrapperJNI.mdMUMatchcode_DeleteMatchcodeItem(swigCPtr, this, Pos));
  }

  public int RenameMatchcode(String Name) {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_RenameMatchcode(swigCPtr, this, Name);
  }

  public int DeleteMatchcode() {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_DeleteMatchcode(swigCPtr, this);
  }

  public void Save() {
    mdMatchUpJavaWrapperJNI.mdMUMatchcode_Save(swigCPtr, this);
  }

  public void SaveToFile(String Path) {
    mdMatchUpJavaWrapperJNI.mdMUMatchcode_SaveToFile(swigCPtr, this, Path);
  }

  public int CreateNewMatchcode(String Matchcode) {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_CreateNewMatchcode(swigCPtr, this, Matchcode);
  }

  public String GetRuleDescription(int Rule_, int Abbreviated_) {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_GetRuleDescription(swigCPtr, this, Rule_, Abbreviated_);
  }

  public int GetMaximumCombinations() {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_GetMaximumCombinations(swigCPtr, this);
  }

  public int GetAllowedInputMappingCount(MatchcodeMappingTarget Mapping_) {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_GetAllowedInputMappingCount(swigCPtr, this, Mapping_.swigValue());
  }

  public MatchcodeMapping GetAllowedInputMappingType(MatchcodeMappingTarget Mapping_, int Pos_) {
    return MatchcodeMapping.swigToEnum(mdMatchUpJavaWrapperJNI.mdMUMatchcode_GetAllowedInputMappingType(swigCPtr, this, Mapping_.swigValue(), Pos_));
  }

  public String GetAllowedInputMappingLabel(MatchcodeMappingTarget Mapping_, int Pos_) {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_GetAllowedInputMappingLabel(swigCPtr, this, Mapping_.swigValue(), Pos_);
  }

  public String GetInputMappingLabel(MatchcodeMapping Mapping_) {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_GetInputMappingLabel(swigCPtr, this, Mapping_.swigValue());
  }

  public MatchcodeMapping ParseInputMappingLabel(String Value_) {
    return MatchcodeMapping.swigToEnum(mdMatchUpJavaWrapperJNI.mdMUMatchcode_ParseInputMappingLabel(swigCPtr, this, Value_));
  }

  public MatchcodeMapping GetBestInputMappingType(MatchcodeMappingTarget Target_) {
    return MatchcodeMapping.swigToEnum(mdMatchUpJavaWrapperJNI.mdMUMatchcode_GetBestInputMappingType(swigCPtr, this, Target_.swigValue()));
  }

  public int IsDirectConversion(MatchcodeMapping Source_, MatchcodeMappingTarget Target_) {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_IsDirectConversion(swigCPtr, this, Source_.swigValue(), Target_.swigValue());
  }

  public int IsConvertable(MatchcodeMapping Source_, MatchcodeMappingTarget Target_) {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_IsConvertable(swigCPtr, this, Source_.swigValue(), Target_.swigValue());
  }

  public String GetInputMappingEnum() {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_GetInputMappingEnum(swigCPtr, this);
  }

  public void SetReserved(String Property, String Value) {
    mdMatchUpJavaWrapperJNI.mdMUMatchcode_SetReserved(swigCPtr, this, Property, Value);
  }

  public String GetReserved(String Property) {
    return mdMatchUpJavaWrapperJNI.mdMUMatchcode_GetReserved(swigCPtr, this, Property);
  }

  public final static class ProgramStatus {
    public final static ProgramStatus ErrorNone = new ProgramStatus("ErrorNone", mdMatchUpJavaWrapperJNI.mdMUMatchcode_ErrorNone_get());
    public final static ProgramStatus ErrorConfigFile = new ProgramStatus("ErrorConfigFile");
    public final static ProgramStatus ErrorLicenseExpired = new ProgramStatus("ErrorLicenseExpired");
    public final static ProgramStatus ErrorDatabaseExpired = new ProgramStatus("ErrorDatabaseExpired");
    public final static ProgramStatus ErrorMatchcodeNotSpecified = new ProgramStatus("ErrorMatchcodeNotSpecified");
    public final static ProgramStatus ErrorMatchcodeNotFound = new ProgramStatus("ErrorMatchcodeNotFound");
    public final static ProgramStatus ErrorInvalidMatchcode = new ProgramStatus("ErrorInvalidMatchcode");
    public final static ProgramStatus ErrorKeyFile = new ProgramStatus("ErrorKeyFile");
    public final static ProgramStatus ErrorNoneIntersectingGroupCache = new ProgramStatus("ErrorNoneIntersectingGroupCache");
    public final static ProgramStatus ErrorMatchcodeObsolete = new ProgramStatus("ErrorMatchcodeObsolete");
    public final static ProgramStatus ErrorGlobalAddrInit = new ProgramStatus("ErrorGlobalAddrInit");
    public final static ProgramStatus ErrorIntlLicenseRequired = new ProgramStatus("ErrorIntlLicenseRequired");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ProgramStatus swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ProgramStatus.class + " with value " + swigValue);
    }

    private ProgramStatus(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ProgramStatus(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ProgramStatus(String swigName, ProgramStatus swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ProgramStatus[] swigValues = { ErrorNone, ErrorConfigFile, ErrorLicenseExpired, ErrorDatabaseExpired, ErrorMatchcodeNotSpecified, ErrorMatchcodeNotFound, ErrorInvalidMatchcode, ErrorKeyFile, ErrorNoneIntersectingGroupCache, ErrorMatchcodeObsolete, ErrorGlobalAddrInit, ErrorIntlLicenseRequired };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class MatchcodeComponentType {
    public final static MatchcodeComponentType PrefixComp = new MatchcodeComponentType("PrefixComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_PrefixComp_get());
    public final static MatchcodeComponentType FirstComp = new MatchcodeComponentType("FirstComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_FirstComp_get());
    public final static MatchcodeComponentType MiddleComp = new MatchcodeComponentType("MiddleComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_MiddleComp_get());
    public final static MatchcodeComponentType LastComp = new MatchcodeComponentType("LastComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_LastComp_get());
    public final static MatchcodeComponentType SuffixComp = new MatchcodeComponentType("SuffixComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_SuffixComp_get());
    public final static MatchcodeComponentType GenderComp = new MatchcodeComponentType("GenderComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_GenderComp_get());
    public final static MatchcodeComponentType FirstNicknameComp = new MatchcodeComponentType("FirstNicknameComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_FirstNicknameComp_get());
    public final static MatchcodeComponentType MiddleNicknameComp = new MatchcodeComponentType("MiddleNicknameComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_MiddleNicknameComp_get());
    public final static MatchcodeComponentType TitleComp = new MatchcodeComponentType("TitleComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_TitleComp_get());
    public final static MatchcodeComponentType CompanyComp = new MatchcodeComponentType("CompanyComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_CompanyComp_get());
    public final static MatchcodeComponentType CompanyAcronymComp = new MatchcodeComponentType("CompanyAcronymComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_CompanyAcronymComp_get());
    public final static MatchcodeComponentType StreetNumberComp = new MatchcodeComponentType("StreetNumberComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_StreetNumberComp_get());
    public final static MatchcodeComponentType StreetPreDirComp = new MatchcodeComponentType("StreetPreDirComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_StreetPreDirComp_get());
    public final static MatchcodeComponentType StreetNameComp = new MatchcodeComponentType("StreetNameComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_StreetNameComp_get());
    public final static MatchcodeComponentType StreetSuffixComp = new MatchcodeComponentType("StreetSuffixComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_StreetSuffixComp_get());
    public final static MatchcodeComponentType StreetPostDirComp = new MatchcodeComponentType("StreetPostDirComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_StreetPostDirComp_get());
    public final static MatchcodeComponentType POBoxComp = new MatchcodeComponentType("POBoxComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_POBoxComp_get());
    public final static MatchcodeComponentType SecondaryComp = new MatchcodeComponentType("SecondaryComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_SecondaryComp_get());
    public final static MatchcodeComponentType AddressComp = new MatchcodeComponentType("AddressComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_AddressComp_get());
    public final static MatchcodeComponentType CityComp = new MatchcodeComponentType("CityComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_CityComp_get());
    public final static MatchcodeComponentType StateComp = new MatchcodeComponentType("StateComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_StateComp_get());
    public final static MatchcodeComponentType Zip9Comp = new MatchcodeComponentType("Zip9Comp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Zip9Comp_get());
    public final static MatchcodeComponentType Zip5Comp = new MatchcodeComponentType("Zip5Comp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Zip5Comp_get());
    public final static MatchcodeComponentType Zip4Comp = new MatchcodeComponentType("Zip4Comp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Zip4Comp_get());
    public final static MatchcodeComponentType CountryComp = new MatchcodeComponentType("CountryComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_CountryComp_get());
    public final static MatchcodeComponentType CanadianPCComp = new MatchcodeComponentType("CanadianPCComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_CanadianPCComp_get());
    public final static MatchcodeComponentType PhoneComp = new MatchcodeComponentType("PhoneComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_PhoneComp_get());
    public final static MatchcodeComponentType EMailComp = new MatchcodeComponentType("EMailComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_EMailComp_get());
    public final static MatchcodeComponentType CreditCardComp = new MatchcodeComponentType("CreditCardComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_CreditCardComp_get());
    public final static MatchcodeComponentType GeneralComp = new MatchcodeComponentType("GeneralComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_GeneralComp_get());
    public final static MatchcodeComponentType GeoDistanceComp = new MatchcodeComponentType("GeoDistanceComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_GeoDistanceComp_get());
    public final static MatchcodeComponentType DateComp = new MatchcodeComponentType("DateComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_DateComp_get());
    public final static MatchcodeComponentType NumericComp = new MatchcodeComponentType("NumericComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_NumericComp_get());
    public final static MatchcodeComponentType PremisesNumberComp = new MatchcodeComponentType("PremisesNumberComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_PremisesNumberComp_get());
    public final static MatchcodeComponentType ThoroughfarePreDirComp = new MatchcodeComponentType("ThoroughfarePreDirComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_ThoroughfarePreDirComp_get());
    public final static MatchcodeComponentType ThoroughfareLeadingTypeComp = new MatchcodeComponentType("ThoroughfareLeadingTypeComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_ThoroughfareLeadingTypeComp_get());
    public final static MatchcodeComponentType ThoroughfareNameComp = new MatchcodeComponentType("ThoroughfareNameComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_ThoroughfareNameComp_get());
    public final static MatchcodeComponentType ThoroughfarePostDirComp = new MatchcodeComponentType("ThoroughfarePostDirComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_ThoroughfarePostDirComp_get());
    public final static MatchcodeComponentType ThoroughfareTrailingTypeComp = new MatchcodeComponentType("ThoroughfareTrailingTypeComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_ThoroughfareTrailingTypeComp_get());
    public final static MatchcodeComponentType DepThoroughfarePreDirComp = new MatchcodeComponentType("DepThoroughfarePreDirComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_DepThoroughfarePreDirComp_get());
    public final static MatchcodeComponentType DepThoroughfareLeadingTypeComp = new MatchcodeComponentType("DepThoroughfareLeadingTypeComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_DepThoroughfareLeadingTypeComp_get());
    public final static MatchcodeComponentType DepThoroughfareNameComp = new MatchcodeComponentType("DepThoroughfareNameComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_DepThoroughfareNameComp_get());
    public final static MatchcodeComponentType DepThoroughfarePostDirComp = new MatchcodeComponentType("DepThoroughfarePostDirComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_DepThoroughfarePostDirComp_get());
    public final static MatchcodeComponentType DepThoroughfareTrailingTypeComp = new MatchcodeComponentType("DepThoroughfareTrailingTypeComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_DepThoroughfareTrailingTypeComp_get());
    public final static MatchcodeComponentType LocalityComp = new MatchcodeComponentType("LocalityComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_LocalityComp_get());
    public final static MatchcodeComponentType DependentLocalityComp = new MatchcodeComponentType("DependentLocalityComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_DependentLocalityComp_get());
    public final static MatchcodeComponentType DblDependentLocalityComp = new MatchcodeComponentType("DblDependentLocalityComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_DblDependentLocalityComp_get());
    public final static MatchcodeComponentType AdministrativeAreaComp = new MatchcodeComponentType("AdministrativeAreaComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_AdministrativeAreaComp_get());
    public final static MatchcodeComponentType SubAdministrativeAreaComp = new MatchcodeComponentType("SubAdministrativeAreaComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_SubAdministrativeAreaComp_get());
    public final static MatchcodeComponentType PostalCodeComp = new MatchcodeComponentType("PostalCodeComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_PostalCodeComp_get());
    public final static MatchcodeComponentType SubNationalAreaComp = new MatchcodeComponentType("SubNationalAreaComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_SubNationalAreaComp_get());
    public final static MatchcodeComponentType PostBoxComp = new MatchcodeComponentType("PostBoxComp", mdMatchUpJavaWrapperJNI.mdMUMatchcode_PostBoxComp_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static MatchcodeComponentType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + MatchcodeComponentType.class + " with value " + swigValue);
    }

    private MatchcodeComponentType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private MatchcodeComponentType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private MatchcodeComponentType(String swigName, MatchcodeComponentType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static MatchcodeComponentType[] swigValues = { PrefixComp, FirstComp, MiddleComp, LastComp, SuffixComp, GenderComp, FirstNicknameComp, MiddleNicknameComp, TitleComp, CompanyComp, CompanyAcronymComp, StreetNumberComp, StreetPreDirComp, StreetNameComp, StreetSuffixComp, StreetPostDirComp, POBoxComp, SecondaryComp, AddressComp, CityComp, StateComp, Zip9Comp, Zip5Comp, Zip4Comp, CountryComp, CanadianPCComp, PhoneComp, EMailComp, CreditCardComp, GeneralComp, GeoDistanceComp, DateComp, NumericComp, PremisesNumberComp, ThoroughfarePreDirComp, ThoroughfareLeadingTypeComp, ThoroughfareNameComp, ThoroughfarePostDirComp, ThoroughfareTrailingTypeComp, DepThoroughfarePreDirComp, DepThoroughfareLeadingTypeComp, DepThoroughfareNameComp, DepThoroughfarePostDirComp, DepThoroughfareTrailingTypeComp, LocalityComp, DependentLocalityComp, DblDependentLocalityComp, AdministrativeAreaComp, SubAdministrativeAreaComp, PostalCodeComp, SubNationalAreaComp, PostBoxComp };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class MatchcodeStart {
    public final static MatchcodeStart Left = new MatchcodeStart("Left", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Left_get());
    public final static MatchcodeStart Right = new MatchcodeStart("Right", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Right_get());
    public final static MatchcodeStart StartAtPos = new MatchcodeStart("StartAtPos", mdMatchUpJavaWrapperJNI.mdMUMatchcode_StartAtPos_get());
    public final static MatchcodeStart StartAtWord = new MatchcodeStart("StartAtWord", mdMatchUpJavaWrapperJNI.mdMUMatchcode_StartAtWord_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static MatchcodeStart swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + MatchcodeStart.class + " with value " + swigValue);
    }

    private MatchcodeStart(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private MatchcodeStart(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private MatchcodeStart(String swigName, MatchcodeStart swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static MatchcodeStart[] swigValues = { Left, Right, StartAtPos, StartAtWord };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class MatchcodeTrim {
    public final static MatchcodeTrim LeftTrim = new MatchcodeTrim("LeftTrim", mdMatchUpJavaWrapperJNI.mdMUMatchcode_LeftTrim_get());
    public final static MatchcodeTrim RightTrim = new MatchcodeTrim("RightTrim", mdMatchUpJavaWrapperJNI.mdMUMatchcode_RightTrim_get());
    public final static MatchcodeTrim AllTrim = new MatchcodeTrim("AllTrim", mdMatchUpJavaWrapperJNI.mdMUMatchcode_AllTrim_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static MatchcodeTrim swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + MatchcodeTrim.class + " with value " + swigValue);
    }

    private MatchcodeTrim(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private MatchcodeTrim(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private MatchcodeTrim(String swigName, MatchcodeTrim swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static MatchcodeTrim[] swigValues = { LeftTrim, RightTrim, AllTrim };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class MatchcodeFuzzy {
    public final static MatchcodeFuzzy Exact = new MatchcodeFuzzy("Exact", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Exact_get());
    public final static MatchcodeFuzzy SoundEx = new MatchcodeFuzzy("SoundEx", mdMatchUpJavaWrapperJNI.mdMUMatchcode_SoundEx_get());
    public final static MatchcodeFuzzy Phonetex = new MatchcodeFuzzy("Phonetex", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Phonetex_get());
    public final static MatchcodeFuzzy Containment = new MatchcodeFuzzy("Containment", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Containment_get());
    public final static MatchcodeFuzzy Frequency = new MatchcodeFuzzy("Frequency", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Frequency_get());
    public final static MatchcodeFuzzy FastNear = new MatchcodeFuzzy("FastNear", mdMatchUpJavaWrapperJNI.mdMUMatchcode_FastNear_get());
    public final static MatchcodeFuzzy AccurateNear = new MatchcodeFuzzy("AccurateNear", mdMatchUpJavaWrapperJNI.mdMUMatchcode_AccurateNear_get());
    public final static MatchcodeFuzzy VowelsOnly = new MatchcodeFuzzy("VowelsOnly", mdMatchUpJavaWrapperJNI.mdMUMatchcode_VowelsOnly_get());
    public final static MatchcodeFuzzy ConsonantsOnly = new MatchcodeFuzzy("ConsonantsOnly", mdMatchUpJavaWrapperJNI.mdMUMatchcode_ConsonantsOnly_get());
    public final static MatchcodeFuzzy AlphasOnly = new MatchcodeFuzzy("AlphasOnly", mdMatchUpJavaWrapperJNI.mdMUMatchcode_AlphasOnly_get());
    public final static MatchcodeFuzzy NumericsOnly = new MatchcodeFuzzy("NumericsOnly", mdMatchUpJavaWrapperJNI.mdMUMatchcode_NumericsOnly_get());
    public final static MatchcodeFuzzy FrequencyNear = new MatchcodeFuzzy("FrequencyNear", mdMatchUpJavaWrapperJNI.mdMUMatchcode_FrequencyNear_get());
    public final static MatchcodeFuzzy NGram = new MatchcodeFuzzy("NGram", mdMatchUpJavaWrapperJNI.mdMUMatchcode_NGram_get());
    public final static MatchcodeFuzzy Jaro = new MatchcodeFuzzy("Jaro", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Jaro_get());
    public final static MatchcodeFuzzy JaroWinkler = new MatchcodeFuzzy("JaroWinkler", mdMatchUpJavaWrapperJNI.mdMUMatchcode_JaroWinkler_get());
    public final static MatchcodeFuzzy LCS = new MatchcodeFuzzy("LCS", mdMatchUpJavaWrapperJNI.mdMUMatchcode_LCS_get());
    public final static MatchcodeFuzzy NeedlemanWunsch = new MatchcodeFuzzy("NeedlemanWunsch", mdMatchUpJavaWrapperJNI.mdMUMatchcode_NeedlemanWunsch_get());
    public final static MatchcodeFuzzy MDKeyboard = new MatchcodeFuzzy("MDKeyboard", mdMatchUpJavaWrapperJNI.mdMUMatchcode_MDKeyboard_get());
    public final static MatchcodeFuzzy SmithWatermanGotoh = new MatchcodeFuzzy("SmithWatermanGotoh", mdMatchUpJavaWrapperJNI.mdMUMatchcode_SmithWatermanGotoh_get());
    public final static MatchcodeFuzzy Dice = new MatchcodeFuzzy("Dice", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Dice_get());
    public final static MatchcodeFuzzy Jaccard = new MatchcodeFuzzy("Jaccard", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Jaccard_get());
    public final static MatchcodeFuzzy Overlap = new MatchcodeFuzzy("Overlap", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Overlap_get());
    public final static MatchcodeFuzzy DoubleMetaphone = new MatchcodeFuzzy("DoubleMetaphone", mdMatchUpJavaWrapperJNI.mdMUMatchcode_DoubleMetaphone_get());
    public final static MatchcodeFuzzy UTF8Near = new MatchcodeFuzzy("UTF8Near", mdMatchUpJavaWrapperJNI.mdMUMatchcode_UTF8Near_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static MatchcodeFuzzy swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + MatchcodeFuzzy.class + " with value " + swigValue);
    }

    private MatchcodeFuzzy(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private MatchcodeFuzzy(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private MatchcodeFuzzy(String swigName, MatchcodeFuzzy swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static MatchcodeFuzzy[] swigValues = { Exact, SoundEx, Phonetex, Containment, Frequency, FastNear, AccurateNear, VowelsOnly, ConsonantsOnly, AlphasOnly, NumericsOnly, FrequencyNear, NGram, Jaro, JaroWinkler, LCS, NeedlemanWunsch, MDKeyboard, SmithWatermanGotoh, Dice, Jaccard, Overlap, DoubleMetaphone, UTF8Near };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class MatchcodeFieldMatch {
    public final static MatchcodeFieldMatch NoFieldMatch = new MatchcodeFieldMatch("NoFieldMatch", mdMatchUpJavaWrapperJNI.mdMUMatchcode_NoFieldMatch_get());
    public final static MatchcodeFieldMatch BothBlankMatch = new MatchcodeFieldMatch("BothBlankMatch", mdMatchUpJavaWrapperJNI.mdMUMatchcode_BothBlankMatch_get());
    public final static MatchcodeFieldMatch OneBlankMatch = new MatchcodeFieldMatch("OneBlankMatch", mdMatchUpJavaWrapperJNI.mdMUMatchcode_OneBlankMatch_get());
    public final static MatchcodeFieldMatch InitialMatch = new MatchcodeFieldMatch("InitialMatch", mdMatchUpJavaWrapperJNI.mdMUMatchcode_InitialMatch_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static MatchcodeFieldMatch swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + MatchcodeFieldMatch.class + " with value " + swigValue);
    }

    private MatchcodeFieldMatch(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private MatchcodeFieldMatch(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private MatchcodeFieldMatch(String swigName, MatchcodeFieldMatch swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static MatchcodeFieldMatch[] swigValues = { NoFieldMatch, BothBlankMatch, OneBlankMatch, InitialMatch };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class MatchcodeSwap {
    public final static MatchcodeSwap NoSwap = new MatchcodeSwap("NoSwap", mdMatchUpJavaWrapperJNI.mdMUMatchcode_NoSwap_get());
    public final static MatchcodeSwap SwapA = new MatchcodeSwap("SwapA", mdMatchUpJavaWrapperJNI.mdMUMatchcode_SwapA_get());
    public final static MatchcodeSwap SwapB = new MatchcodeSwap("SwapB", mdMatchUpJavaWrapperJNI.mdMUMatchcode_SwapB_get());
    public final static MatchcodeSwap SwapC = new MatchcodeSwap("SwapC", mdMatchUpJavaWrapperJNI.mdMUMatchcode_SwapC_get());
    public final static MatchcodeSwap SwapD = new MatchcodeSwap("SwapD", mdMatchUpJavaWrapperJNI.mdMUMatchcode_SwapD_get());
    public final static MatchcodeSwap SwapE = new MatchcodeSwap("SwapE", mdMatchUpJavaWrapperJNI.mdMUMatchcode_SwapE_get());
    public final static MatchcodeSwap SwapF = new MatchcodeSwap("SwapF", mdMatchUpJavaWrapperJNI.mdMUMatchcode_SwapF_get());
    public final static MatchcodeSwap SwapG = new MatchcodeSwap("SwapG", mdMatchUpJavaWrapperJNI.mdMUMatchcode_SwapG_get());
    public final static MatchcodeSwap SwapH = new MatchcodeSwap("SwapH", mdMatchUpJavaWrapperJNI.mdMUMatchcode_SwapH_get());
    public final static MatchcodeSwap BothA = new MatchcodeSwap("BothA", mdMatchUpJavaWrapperJNI.mdMUMatchcode_BothA_get());
    public final static MatchcodeSwap BothB = new MatchcodeSwap("BothB", mdMatchUpJavaWrapperJNI.mdMUMatchcode_BothB_get());
    public final static MatchcodeSwap BothC = new MatchcodeSwap("BothC", mdMatchUpJavaWrapperJNI.mdMUMatchcode_BothC_get());
    public final static MatchcodeSwap BothD = new MatchcodeSwap("BothD", mdMatchUpJavaWrapperJNI.mdMUMatchcode_BothD_get());
    public final static MatchcodeSwap BothE = new MatchcodeSwap("BothE", mdMatchUpJavaWrapperJNI.mdMUMatchcode_BothE_get());
    public final static MatchcodeSwap BothF = new MatchcodeSwap("BothF", mdMatchUpJavaWrapperJNI.mdMUMatchcode_BothF_get());
    public final static MatchcodeSwap BothG = new MatchcodeSwap("BothG", mdMatchUpJavaWrapperJNI.mdMUMatchcode_BothG_get());
    public final static MatchcodeSwap BothH = new MatchcodeSwap("BothH", mdMatchUpJavaWrapperJNI.mdMUMatchcode_BothH_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static MatchcodeSwap swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + MatchcodeSwap.class + " with value " + swigValue);
    }

    private MatchcodeSwap(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private MatchcodeSwap(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private MatchcodeSwap(String swigName, MatchcodeSwap swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static MatchcodeSwap[] swigValues = { NoSwap, SwapA, SwapB, SwapC, SwapD, SwapE, SwapF, SwapG, SwapH, BothA, BothB, BothC, BothD, BothE, BothF, BothG, BothH };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class MatchcodeCombination {
    public final static MatchcodeCombination Combo1 = new MatchcodeCombination("Combo1", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Combo1_get());
    public final static MatchcodeCombination Combo2 = new MatchcodeCombination("Combo2", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Combo2_get());
    public final static MatchcodeCombination Combo3 = new MatchcodeCombination("Combo3", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Combo3_get());
    public final static MatchcodeCombination Combo4 = new MatchcodeCombination("Combo4", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Combo4_get());
    public final static MatchcodeCombination Combo5 = new MatchcodeCombination("Combo5", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Combo5_get());
    public final static MatchcodeCombination Combo6 = new MatchcodeCombination("Combo6", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Combo6_get());
    public final static MatchcodeCombination Combo7 = new MatchcodeCombination("Combo7", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Combo7_get());
    public final static MatchcodeCombination Combo8 = new MatchcodeCombination("Combo8", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Combo8_get());
    public final static MatchcodeCombination Combo9 = new MatchcodeCombination("Combo9", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Combo9_get());
    public final static MatchcodeCombination Combo10 = new MatchcodeCombination("Combo10", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Combo10_get());
    public final static MatchcodeCombination Combo11 = new MatchcodeCombination("Combo11", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Combo11_get());
    public final static MatchcodeCombination Combo12 = new MatchcodeCombination("Combo12", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Combo12_get());
    public final static MatchcodeCombination Combo13 = new MatchcodeCombination("Combo13", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Combo13_get());
    public final static MatchcodeCombination Combo14 = new MatchcodeCombination("Combo14", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Combo14_get());
    public final static MatchcodeCombination Combo15 = new MatchcodeCombination("Combo15", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Combo15_get());
    public final static MatchcodeCombination Combo16 = new MatchcodeCombination("Combo16", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Combo16_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static MatchcodeCombination swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + MatchcodeCombination.class + " with value " + swigValue);
    }

    private MatchcodeCombination(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private MatchcodeCombination(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private MatchcodeCombination(String swigName, MatchcodeCombination swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static MatchcodeCombination[] swigValues = { Combo1, Combo2, Combo3, Combo4, Combo5, Combo6, Combo7, Combo8, Combo9, Combo10, Combo11, Combo12, Combo13, Combo14, Combo15, Combo16 };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class MatchcodeMappingTarget {
    public final static MatchcodeMappingTarget PrefixType = new MatchcodeMappingTarget("PrefixType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_PrefixType_get());
    public final static MatchcodeMappingTarget FirstType = new MatchcodeMappingTarget("FirstType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_FirstType_get());
    public final static MatchcodeMappingTarget MiddleType = new MatchcodeMappingTarget("MiddleType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_MiddleType_get());
    public final static MatchcodeMappingTarget LastType = new MatchcodeMappingTarget("LastType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_LastType_get());
    public final static MatchcodeMappingTarget SuffixType = new MatchcodeMappingTarget("SuffixType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_SuffixType_get());
    public final static MatchcodeMappingTarget GenderType = new MatchcodeMappingTarget("GenderType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_GenderType_get());
    public final static MatchcodeMappingTarget FirstNicknameType = new MatchcodeMappingTarget("FirstNicknameType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_FirstNicknameType_get());
    public final static MatchcodeMappingTarget MiddleNicknameType = new MatchcodeMappingTarget("MiddleNicknameType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_MiddleNicknameType_get());
    public final static MatchcodeMappingTarget TitleType = new MatchcodeMappingTarget("TitleType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_TitleType_get());
    public final static MatchcodeMappingTarget CompanyType = new MatchcodeMappingTarget("CompanyType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_CompanyType_get());
    public final static MatchcodeMappingTarget CompanyAcronymType = new MatchcodeMappingTarget("CompanyAcronymType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_CompanyAcronymType_get());
    public final static MatchcodeMappingTarget AddressType = new MatchcodeMappingTarget("AddressType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_AddressType_get());
    public final static MatchcodeMappingTarget CityType = new MatchcodeMappingTarget("CityType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_CityType_get());
    public final static MatchcodeMappingTarget StateType = new MatchcodeMappingTarget("StateType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_StateType_get());
    public final static MatchcodeMappingTarget Zip9Type = new MatchcodeMappingTarget("Zip9Type", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Zip9Type_get());
    public final static MatchcodeMappingTarget Zip5Type = new MatchcodeMappingTarget("Zip5Type", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Zip5Type_get());
    public final static MatchcodeMappingTarget Zip4Type = new MatchcodeMappingTarget("Zip4Type", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Zip4Type_get());
    public final static MatchcodeMappingTarget CountryType = new MatchcodeMappingTarget("CountryType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_CountryType_get());
    public final static MatchcodeMappingTarget CanadianPCType = new MatchcodeMappingTarget("CanadianPCType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_CanadianPCType_get());
    public final static MatchcodeMappingTarget PhoneType = new MatchcodeMappingTarget("PhoneType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_PhoneType_get());
    public final static MatchcodeMappingTarget EMailType = new MatchcodeMappingTarget("EMailType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_EMailType_get());
    public final static MatchcodeMappingTarget CreditCardType = new MatchcodeMappingTarget("CreditCardType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_CreditCardType_get());
    public final static MatchcodeMappingTarget GeneralType = new MatchcodeMappingTarget("GeneralType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_GeneralType_get());
    public final static MatchcodeMappingTarget Address1Type = new MatchcodeMappingTarget("Address1Type", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Address1Type_get());
    public final static MatchcodeMappingTarget Address2Type = new MatchcodeMappingTarget("Address2Type", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Address2Type_get());
    public final static MatchcodeMappingTarget Address3Type = new MatchcodeMappingTarget("Address3Type", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Address3Type_get());
    public final static MatchcodeMappingTarget LatitudeType = new MatchcodeMappingTarget("LatitudeType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_LatitudeType_get());
    public final static MatchcodeMappingTarget LongitudeType = new MatchcodeMappingTarget("LongitudeType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_LongitudeType_get());
    public final static MatchcodeMappingTarget DateType = new MatchcodeMappingTarget("DateType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_DateType_get());
    public final static MatchcodeMappingTarget NumericType = new MatchcodeMappingTarget("NumericType", mdMatchUpJavaWrapperJNI.mdMUMatchcode_NumericType_get());
    public final static MatchcodeMappingTarget Address4Type = new MatchcodeMappingTarget("Address4Type", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Address4Type_get());
    public final static MatchcodeMappingTarget Address5Type = new MatchcodeMappingTarget("Address5Type", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Address5Type_get());
    public final static MatchcodeMappingTarget Address6Type = new MatchcodeMappingTarget("Address6Type", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Address6Type_get());
    public final static MatchcodeMappingTarget Address7Type = new MatchcodeMappingTarget("Address7Type", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Address7Type_get());
    public final static MatchcodeMappingTarget Address8Type = new MatchcodeMappingTarget("Address8Type", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Address8Type_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static MatchcodeMappingTarget swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + MatchcodeMappingTarget.class + " with value " + swigValue);
    }

    private MatchcodeMappingTarget(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private MatchcodeMappingTarget(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private MatchcodeMappingTarget(String swigName, MatchcodeMappingTarget swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static MatchcodeMappingTarget[] swigValues = { PrefixType, FirstType, MiddleType, LastType, SuffixType, GenderType, FirstNicknameType, MiddleNicknameType, TitleType, CompanyType, CompanyAcronymType, AddressType, CityType, StateType, Zip9Type, Zip5Type, Zip4Type, CountryType, CanadianPCType, PhoneType, EMailType, CreditCardType, GeneralType, Address1Type, Address2Type, Address3Type, LatitudeType, LongitudeType, DateType, NumericType, Address4Type, Address5Type, Address6Type, Address7Type, Address8Type };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class MatchcodeStatus {
    public final static MatchcodeStatus MCNoError = new MatchcodeStatus("MCNoError", mdMatchUpJavaWrapperJNI.mdMUMatchcode_MCNoError_get());
    public final static MatchcodeStatus MCFirstComponentFuzzyOptions = new MatchcodeStatus("MCFirstComponentFuzzyOptions");
    public final static MatchcodeStatus MCFirstComponentNoSwapPair = new MatchcodeStatus("MCFirstComponentNoSwapPair");
    public final static MatchcodeStatus MCDataTypeNoFuzzy = new MatchcodeStatus("MCDataTypeNoFuzzy");
    public final static MatchcodeStatus MCComponentFuzzyIncorrectSize = new MatchcodeStatus("MCComponentFuzzyIncorrectSize");
    public final static MatchcodeStatus MCDataTypeNoMaximumNumberWords = new MatchcodeStatus("MCDataTypeNoMaximumNumberWords");
    public final static MatchcodeStatus MCDataTypeNoStartRightOrWordOrPos = new MatchcodeStatus("MCDataTypeNoStartRightOrWordOrPos");
    public final static MatchcodeStatus MCIncorrectMaximumNumberWords = new MatchcodeStatus("MCIncorrectMaximumNumberWords");
    public final static MatchcodeStatus MCNearOutOfRange = new MatchcodeStatus("MCNearOutOfRange");
    public final static MatchcodeStatus MCFirstComponentNotUsedInEveryCondition = new MatchcodeStatus("MCFirstComponentNotUsedInEveryCondition");
    public final static MatchcodeStatus MCCannotChangeFirstComponent = new MatchcodeStatus("MCCannotChangeFirstComponent");
    public final static MatchcodeStatus MCInvalidSwapPair = new MatchcodeStatus("MCInvalidSwapPair");
    public final static MatchcodeStatus MCIncorrectStartPosOrStartWord = new MatchcodeStatus("MCIncorrectStartPosOrStartWord");
    public final static MatchcodeStatus MCInvalidMatchcodeComponentType = new MatchcodeStatus("MCInvalidMatchcodeComponentType");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static MatchcodeStatus swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + MatchcodeStatus.class + " with value " + swigValue);
    }

    private MatchcodeStatus(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private MatchcodeStatus(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private MatchcodeStatus(String swigName, MatchcodeStatus swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static MatchcodeStatus[] swigValues = { MCNoError, MCFirstComponentFuzzyOptions, MCFirstComponentNoSwapPair, MCDataTypeNoFuzzy, MCComponentFuzzyIncorrectSize, MCDataTypeNoMaximumNumberWords, MCDataTypeNoStartRightOrWordOrPos, MCIncorrectMaximumNumberWords, MCNearOutOfRange, MCFirstComponentNotUsedInEveryCondition, MCCannotChangeFirstComponent, MCInvalidSwapPair, MCIncorrectStartPosOrStartWord, MCInvalidMatchcodeComponentType };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class MatchcodeMapping {
    public final static MatchcodeMapping Prefix = new MatchcodeMapping("Prefix", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Prefix_get());
    public final static MatchcodeMapping Gender = new MatchcodeMapping("Gender", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Gender_get());
    public final static MatchcodeMapping First = new MatchcodeMapping("First", mdMatchUpJavaWrapperJNI.mdMUMatchcode_First_get());
    public final static MatchcodeMapping MixedFirst = new MatchcodeMapping("MixedFirst", mdMatchUpJavaWrapperJNI.mdMUMatchcode_MixedFirst_get());
    public final static MatchcodeMapping Middle = new MatchcodeMapping("Middle", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Middle_get());
    public final static MatchcodeMapping Last = new MatchcodeMapping("Last", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Last_get());
    public final static MatchcodeMapping MixedLast = new MatchcodeMapping("MixedLast", mdMatchUpJavaWrapperJNI.mdMUMatchcode_MixedLast_get());
    public final static MatchcodeMapping Suffix = new MatchcodeMapping("Suffix", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Suffix_get());
    public final static MatchcodeMapping FullName = new MatchcodeMapping("FullName", mdMatchUpJavaWrapperJNI.mdMUMatchcode_FullName_get());
    public final static MatchcodeMapping InverseName = new MatchcodeMapping("InverseName", mdMatchUpJavaWrapperJNI.mdMUMatchcode_InverseName_get());
    public final static MatchcodeMapping GovernmentInverseName = new MatchcodeMapping("GovernmentInverseName", mdMatchUpJavaWrapperJNI.mdMUMatchcode_GovernmentInverseName_get());
    public final static MatchcodeMapping Title = new MatchcodeMapping("Title", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Title_get());
    public final static MatchcodeMapping Company = new MatchcodeMapping("Company", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Company_get());
    public final static MatchcodeMapping Address = new MatchcodeMapping("Address", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Address_get());
    public final static MatchcodeMapping City = new MatchcodeMapping("City", mdMatchUpJavaWrapperJNI.mdMUMatchcode_City_get());
    public final static MatchcodeMapping State = new MatchcodeMapping("State", mdMatchUpJavaWrapperJNI.mdMUMatchcode_State_get());
    public final static MatchcodeMapping Zip9 = new MatchcodeMapping("Zip9", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Zip9_get());
    public final static MatchcodeMapping Zip5 = new MatchcodeMapping("Zip5", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Zip5_get());
    public final static MatchcodeMapping Zip4 = new MatchcodeMapping("Zip4", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Zip4_get());
    public final static MatchcodeMapping CityStZip = new MatchcodeMapping("CityStZip", mdMatchUpJavaWrapperJNI.mdMUMatchcode_CityStZip_get());
    public final static MatchcodeMapping Country = new MatchcodeMapping("Country", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Country_get());
    public final static MatchcodeMapping CanadianPostalCode = new MatchcodeMapping("CanadianPostalCode", mdMatchUpJavaWrapperJNI.mdMUMatchcode_CanadianPostalCode_get());
    public final static MatchcodeMapping Phone = new MatchcodeMapping("Phone", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Phone_get());
    public final static MatchcodeMapping EMail = new MatchcodeMapping("EMail", mdMatchUpJavaWrapperJNI.mdMUMatchcode_EMail_get());
    public final static MatchcodeMapping CreditCard = new MatchcodeMapping("CreditCard", mdMatchUpJavaWrapperJNI.mdMUMatchcode_CreditCard_get());
    public final static MatchcodeMapping General = new MatchcodeMapping("General", mdMatchUpJavaWrapperJNI.mdMUMatchcode_General_get());
    public final static MatchcodeMapping Latitude = new MatchcodeMapping("Latitude", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Latitude_get());
    public final static MatchcodeMapping Longitude = new MatchcodeMapping("Longitude", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Longitude_get());
    public final static MatchcodeMapping Date = new MatchcodeMapping("Date", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Date_get());
    public final static MatchcodeMapping Numeric = new MatchcodeMapping("Numeric", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Numeric_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static MatchcodeMapping swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + MatchcodeMapping.class + " with value " + swigValue);
    }

    private MatchcodeMapping(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private MatchcodeMapping(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private MatchcodeMapping(String swigName, MatchcodeMapping swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static MatchcodeMapping[] swigValues = { Prefix, Gender, First, MixedFirst, Middle, Last, MixedLast, Suffix, FullName, InverseName, GovernmentInverseName, Title, Company, Address, City, State, Zip9, Zip5, Zip4, CityStZip, Country, CanadianPostalCode, Phone, EMail, CreditCard, General, Latitude, Longitude, Date, Numeric };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class MatchcodeNearType {
    public final static MatchcodeNearType NearNone = new MatchcodeNearType("NearNone", mdMatchUpJavaWrapperJNI.mdMUMatchcode_NearNone_get());
    public final static MatchcodeNearType NearInteger = new MatchcodeNearType("NearInteger");
    public final static MatchcodeNearType NearFloat = new MatchcodeNearType("NearFloat");

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static MatchcodeNearType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + MatchcodeNearType.class + " with value " + swigValue);
    }

    private MatchcodeNearType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private MatchcodeNearType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private MatchcodeNearType(String swigName, MatchcodeNearType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static MatchcodeNearType[] swigValues = { NearNone, NearInteger, NearFloat };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

  public final static class ComponentCountryType {
    public final static ComponentCountryType US = new ComponentCountryType("US", mdMatchUpJavaWrapperJNI.mdMUMatchcode_US_get());
    public final static ComponentCountryType Canada = new ComponentCountryType("Canada", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Canada_get());
    public final static ComponentCountryType Global = new ComponentCountryType("Global", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Global_get());
    public final static ComponentCountryType Domestic = new ComponentCountryType("Domestic", mdMatchUpJavaWrapperJNI.mdMUMatchcode_Domestic_get());

    public final int swigValue() {
      return swigValue;
    }

    public String toString() {
      return swigName;
    }

    public static ComponentCountryType swigToEnum(int swigValue) {
      if (swigValue < swigValues.length && swigValue >= 0 && swigValues[swigValue].swigValue == swigValue)
        return swigValues[swigValue];
      for (int i = 0; i < swigValues.length; i++)
        if (swigValues[i].swigValue == swigValue)
          return swigValues[i];
      throw new IllegalArgumentException("No enum " + ComponentCountryType.class + " with value " + swigValue);
    }

    private ComponentCountryType(String swigName) {
      this.swigName = swigName;
      this.swigValue = swigNext++;
    }

    private ComponentCountryType(String swigName, int swigValue) {
      this.swigName = swigName;
      this.swigValue = swigValue;
      swigNext = swigValue+1;
    }

    private ComponentCountryType(String swigName, ComponentCountryType swigEnum) {
      this.swigName = swigName;
      this.swigValue = swigEnum.swigValue;
      swigNext = this.swigValue+1;
    }

    private static ComponentCountryType[] swigValues = { US, Canada, Global, Domestic };
    private static int swigNext = 0;
    private final int swigValue;
    private final String swigName;
  }

}
